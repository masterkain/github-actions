#!/bin/bash
set -e -o pipefail

if [[ -n "$VERBOSE" ]]; then
    set -x
fi

URI=https://api.github.com
API_VERSION=v3
API_HEADER="Accept: application/vnd.github.${API_VERSION}+json"
AUTH_HEADER="Authorization: token ${FLUX_GITHUB_TOKEN}"

# Optional env vars
# $ADDITIONAL_CONFIG
# $ADDITIONAL_CONFIG_SUBSTITUTION
# $INGRESS_DOMAIN

# Ensure all necessary environment variables are set
if [[ -z "$USERNAME" ]]; then
    echo "Set the USERNAME env variable"
    exit 1
elif [[ -z "$FLUX_GITHUB_TOKEN" ]]; then
    echo "Set the FLUX_GITHUB_TOKEN env variable"
    exit 1
elif [[ -z "$ORG" ]]; then
    echo "Set the ORG env variable"
    exit 1
elif [[ -z "$FLUX_REPO" ]]; then
    echo "Set the FLUX_REPO env variable"
    exit 1
elif [[ -z "$FLUX_BRANCH" ]]; then
    echo "Set the FLUX_BRANCH env variable"
    exit 1
elif [[ -z "$FLUX_PATH" ]]; then
    echo "Set the FLUX_PATH env variable"
    exit 1
elif [[ -z "$FLUX_SERVICE" ]]; then
    echo "Set the FLUX_SERVICE env variable"
    exit 1
elif [[ -z "$COMMIT_USER" ]]; then
    echo "Set the COMMIT_USER env variable"
    exit 1
elif [[ -z "$COMMIT_EMAIL" ]]; then
    echo "Set the COMMIT_EMAIL env variable"
    exit 1
elif [[ -z "$BASE_BRANCH" ]]; then
    echo "Set the BASE_BRANCH env variable"
    exit 1
fi

PULL_REQUEST_BRANCH=$(basename "${CURRENT_REF}" | tr '[:upper:]' '[:lower:]' | cut -c1-14 | sed 's/_/-/g')
REPO=$(basename "${GITHUB_REPOSITORY}")

main() {
    echo "GitHub: using ${USERNAME}:${FLUX_GITHUB_TOKEN} ${AUTH_HEADER} ${API_HEADER}"
    # Don't proceed if the base branch is not BASE_BRANCH
    PULL_REQUEST_NUMBER=$(curl -XGET -fsSL -H "${AUTH_HEADER}" -H "${API_HEADER}" "${URI}/repos/${ORG}/${REPO}/pulls?state=all" | jq -r '[.[] | select(.head.sha=="'${CURRENT_SHA}'") | .number][0]')
    PULL_REQUEST_BASE_BRANCH=$(curl -XGET -fsSL -H "${AUTH_HEADER}" -H "${API_HEADER}" "${URI}/repos/${ORG}/${REPO}/pulls?state=all" | jq -r '[.[] | select(.head.sha=="'${CURRENT_SHA}'") | .base | .ref][0]')

    if [[ "$PULL_REQUEST_BASE_BRANCH" != "$BASE_BRANCH" ]]; then
        echo "Base branch is not $BASE_BRANCH. Found $PULL_REQUEST_BASE_BRANCH. Exiting."
        exit 0
    fi

    # Clone the Flux config repo
    if [[ ! -d "$FLUX_REPO" ]]; then
        echo "Cloning https://${USERNAME}:${FLUX_GITHUB_TOKEN}@github.com/${ORG}/${FLUX_REPO}.git"
        git clone -b "${FLUX_BRANCH}" https://"${USERNAME}:${FLUX_GITHUB_TOKEN}@github.com/${ORG}/${FLUX_REPO}.git"
    fi

    # Get the PR state and determine what to do
    PULL_REQUEST_STATE=$(curl -XGET -fsSL -H "${AUTH_HEADER}" -H "${API_HEADER}" "${URI}/repos/${ORG}/${REPO}/pulls?state=all" | jq -r '[.[] | select(.head.sha=="'${CURRENT_SHA}'") | .state][0]')

    if [[ ${PULL_REQUEST_STATE} == "open" ]]; then
        echo "Pull request is open. Running deployment."
        deploy
        GIT_COMMIT_MESSAGE="Create pull request HelmRelease for ${PULL_REQUEST_BRANCH} branch"
    elif [[ ${PULL_REQUEST_STATE} == "closed" ]]; then
        echo "Pull request is closed. Cleaning up resources."
        GIT_COMMIT_MESSAGE="Remove pull request HelmRelease for ${PULL_REQUEST_BRANCH} branch"
        cleanup
    else
        echo "Unknown pull request state for ${CURRENT_SHA}: ${PULL_REQUEST_STATE}. Exiting."
        exit 1
    fi

    # Try pulling in case there have been commits since we cloned
    git -C "$FLUX_REPO" pull

    # Check if our changes actually modified anything in the repo, and if so, commit and push them
    if [[ $(git -C "$FLUX_REPO" status --porcelain) ]]; then
        echo "Creating new commit and pushing to https://${USERNAME}:${FLUX_GITHUB_TOKEN}@github.com/${ORG}/${FLUX_REPO}"
        git -C "$FLUX_REPO" config user.name "${COMMIT_USER}"
        git -C "$FLUX_REPO" config user.email "${COMMIT_EMAIL}"
        git -C "$FLUX_REPO" add -A
        git -C "$FLUX_REPO" commit -m "${GIT_COMMIT_MESSAGE}"
        git -C "$FLUX_REPO" push -u origin HEAD
    else
        echo "No changes detected. Exiting."
        exit 0
    fi
}

deploy() {
    # Create a new HelmRelease
    if [[ ! -f "$FLUX_REPO/$FLUX_PATH/$FLUX_SERVICE-$PULL_REQUEST_BRANCH.yaml" ]]; then
        echo "Pull request HelmRelease does not exist. Creating at: ${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml."
        cp "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}.yaml" "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
    fi

    BRANCH_SERVICE_NAME="${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}"
    PULL_REQUEST_BRANCH_GLOB="glob:${PULL_REQUEST_BRANCH}-*"

    # Update the basic HelmRelease fields
    echo "Updating HelmRelease fields to ${BRANCH_SERVICE_NAME}"
    yq w "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml" metadata.name "${BRANCH_SERVICE_NAME}" | sponge "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
    yq w "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml" metadata.annotations.[fluxcd.io/tag.chart-image] "${PULL_REQUEST_BRANCH_GLOB}" | sponge "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
    yq w "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml" spec.releaseName "${BRANCH_SERVICE_NAME}" | sponge "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
    yq w "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml" spec.values.image "${IMAGE_REPO}:${PULL_REQUEST_BRANCH}-${CURRENT_SHA::8}" | sponge "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"

    # Add ADDITIONAL_CONFIG fields to the HelmRelease, and if ADDITIONAL_CONFIG_SUBSTITUTION is set, sub FLUX_SERVICE for BRANCH_SERVICE_NAME
    if [[ -n "$ADDITIONAL_CONFIG" ]]; then
        if [[ -n "$ADDITIONAL_CONFIG_SUBSTITUTION" ]]; then
            echo "Setting ADDITIONAL_CONFIG fields to ${BRANCH_SERVICE_NAME}"
            ADDITIONAL_CONFIG=$(echo "${ADDITIONAL_CONFIG}" | sed 's#'"${FLUX_SERVICE}"'#'"${BRANCH_SERVICE_NAME}"'#g')
        fi
        echo "Writing updated fields to ${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
        echo "${ADDITIONAL_CONFIG}" | yq r - | yq m -x "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml" - | sponge "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
    fi

    # Re-insert --- at beginning of file (this will show up as a diff and thus cause a new commit to be made)
    sed -i '1s/^/---\n/' "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"

    # Add comment to the PR with the ingress hostname
    if [[ -n "$INGRESS_DOMAIN" ]]; then
        echo "Adding ingress hostname comment to pull request"
        PULL_REQUEST_BODY="Pull request branch deployment successful. Ingress hostname: https://${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.${INGRESS_DOMAIN}"
        curl -XPOST -fsSL \
             -H "${AUTH_HEADER}" \
             -H "${API_HEADER}" \
             ${URI}/repos/${ORG}/${REPO}/issues/${PULL_REQUEST_NUMBER}/comments -d "{\"body\": \"${PULL_REQUEST_BODY}\"}"

    fi
}

cleanup() {
    # Remove the pull request branch HelmRelease
    echo "Removing ${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
    rm -f "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
}

main "$@"
