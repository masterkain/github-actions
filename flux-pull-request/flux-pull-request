#!/bin/bash
set -e -o pipefail

URI=https://api.github.com
API_VERSION=v3
API_HEADER="Accept: application/vnd.github.${API_VERSION}+json"
AUTH_HEADER="Authorization: token ${GITHUB_TOKEN}"

# Optional env vars
# $ADDITIONAL_CONFIG
# $ADDITIONAL_CONFIG_SUBSTITUTION

# Ensure all necessary environment variables are set
if [[ -z "$USERNAME" ]]; then
    echo "Set the USERNAME env variable"
    exit 1
elif [[ -z "$GITHUB_TOKEN" ]]; then
    echo "Set the GITHUB_TOKEN env variable"
    exit 1
elif [[ -z "$ORG" ]]; then
    echo "Set the ORG env variable"
    exit 1
elif [[ -z "$FLUX_REPO" ]]; then
    echo "Set the FLUX_REPO env variable"
    exit 1
elif [[ -z "$FLUX_BRANCH" ]]; then
    echo "Set the FLUX_BRANCH env variable"
    exit 1
elif [[ -z "$FLUX_PATH" ]]; then
    echo "Set the FLUX_PATH env variable"
    exit 1
elif [[ -z "$FLUX_SERVICE" ]]; then
    echo "Set the FLUX_SERVICE env variable"
    exit 1
elif [[ -z "$COMMIT_USER" ]]; then
    echo "Set the COMMIT_USER env variable"
    exit 1
elif [[ -z "$COMMIT_EMAIL" ]]; then
    echo "Set the COMMIT_EMAIL env variable"
    exit 1
fi

PULL_REQUEST_BRANCH=$(basename "${GITHUB_REF}")
REPO=$(basename "${GITHUB_REPOSITORY}")

main() {
    # Clone the Flux config repo
    if [[ ! -d "$FLUX_REPO" ]]; then
        git clone -b "${FLUX_BRANCH}" https://"${USERNAME}:${GITHUB_TOKEN}@github.com/${ORG}/${FLUX_REPO}"
    fi

    # Get the PR state and determine what to do
    PULL_REQUEST_STATE=$(curl -XGET -fsSL \
                            -H "${AUTH_HEADER}" \
                            -H "${API_HEADER}" \
                            "${URI}/repos/${ORG}/${REPO}/pulls" \
                            | jq -r '.[] | select(.head.sha=="'${GITHUB_SHA}'") | .state')

    if [[ ${PULL_REQUEST_STATE} == "open" ]]; then
        echo "Pull request is open. Running deployment"
        deploy
    elif [[ ${PULL_REQUEST_STATE} == "closed" ]]; then
        echo "Pull request is closed. Cleaning up resources"
        cleanup
    else
        echo "Unknown pull request state for ${GITHUB_SHA}: ${PULL_REQUEST_STATE}"
        exit 1
    fi

    git -C "$FLUX_REPO" config user.name "${COMMIT_USER}"
    git -C "$FLUX_REPO" config user.email "${COMMIT_EMAIL}"
    git -C "$FLUX_REPO" add -A
    git -C "$FLUX_REPO" commit -m "Create pull request HelmRelease for ${PULL_REQUEST_BRANCH} branch"
    git -C "$FLUX_REPO" push -u origin HEAD
}

deploy() {
    # Create a new HelmRelease
    if [[ ! -f "$FLUX_REPO/$FLUX_PATH/$FLUX_SERVICE-$PULL_REQUEST_BRANCH.yaml" ]]; then
        cp "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}.yaml" "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
    fi

    BRANCH_SERVICE_NAME="${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}"
    PULL_REQUEST_BRANCH_GLOB="glob:${PULL_REQUEST_BRANCH}-*"
    yq w "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml" metadata.name "${BRANCH_SERVICE_NAME}" | sponge "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
    yq w "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml" metadata.annotations.[flux.weave.works/tag.chart-image] "${PULL_REQUEST_BRANCH_GLOB}" | sponge "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
    yq w "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml" spec.releaseName "${BRANCH_SERVICE_NAME}" | sponge "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"

    if [[ -n "$ADDITIONAL_CONFIG" ]]; then
        if [[ -n "$ADDITIONAL_CONFIG_SUBSTITUTION" ]]; then
            ADDITIONAL_CONFIG=$(echo "${ADDITIONAL_CONFIG}" | sed 's#'"${FLUX_SERVICE}"'#'"${BRANCH_SERVICE_NAME}"'#g')
        fi
        echo $ADDITIONAL_CONFIG | yq r - | yq m - "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml" | sponge "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
    fi
}

cleanup() {
    # Remove the pull request branch HelmRelease
    rm -f "${FLUX_REPO}/${FLUX_PATH}/${FLUX_SERVICE}-${PULL_REQUEST_BRANCH}.yaml"
}

main "$@"
